vertOut vec4 position;

vertIn vec4 position;
vertIn vec2 UVCoordinates;
vertIn vec3 normal;

vertToPix vec4 worldPosition;
vertToPix vec4 camDirection;
vertToPix vec2 uvCoords;
vertToPix vec4 normal;

uniform sampler2D texture0; 
uniform vec4 ourColor;
uniform float effectScale;

void vertex()
{
    vertToPix.worldPosition = vertIn.position * Globals.model;
    
    //https://www.cs.toronto.edu/~jacobson/phong-demo/ pointed out that worldpos.xyz/worldpos.w = -camdir. thanks
    //this code makes no fucking sense
    
    vertToPix.camDirection = vec4(normalize((Globals.view*(vertToPix.worldPosition * Globals.view)).xyz),1.0);

    vertOut.position = vertToPix.worldPosition * Globals.view * Globals.projection;
    vertToPix.normal = vec4(vertIn.normal, 0.0)*Globals.model;
    vertToPix.uvCoords = vertIn.UVCoordinates;
}

uint pcg_hash(uint valIn)
{
    //where would we be without https://www.reedbeta.com/blog/hash-functions-for-gpu-rendering/
    uint state = valIn * 747796405u + 2891336453u;
    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
    return (word >> 22u) ^ word;
}
float uintToFloatRange01(uint rand)
{
    rand >>= 9;
    rand |= 0x3F800000;
    return uintBitsToFloat(rand)-1.0;
}
float randomFloat01(inout uint seed)
{
    seed = pcg_hash(seed);
    return uintToFloatRange01(seed);
}
vec3 getRandomVector(inout uint seed)
{
    return vec3(randomFloat01(seed),randomFloat01(seed),randomFloat01(seed));
}
vec3 getDancingPoint(ivec3 pos)
{
    uint seed = uint((pos.x) ^ ((pos.y) << 8) ^ ((pos.z) << 16));
    float t = Globals.time + randomFloat01(seed);
    int tim = int(t);
    t -= tim;
    uint seedNext = seed ^ ((tim+1)<<5);
    seed ^= tim << 5;

    return getRandomVector(seed)*(1-t) + getRandomVector(seedNext)*t;
}

float sawtooth(float t)
{
    return abs(2.0*fract(t)-1.0);
}
vec3 sawtooth(vec3 t)
{
    return vec3(sawtooth(t.x), sawtooth(t.y), sawtooth(t.z));
}

pixOut vec3 Albedo;

void pixel()
{
    vec4 color = texture(texture0, vertToPix.uvCoords);
    if(color.a < .5) discard;

    vec4 pos = (vertToPix.worldPosition*20+Globals.time*2.5)*effectScale;
    ivec4 slop = ivec4(pos);
    vec3 localpos = pos.xyz - slop.xyz;

    float minDist = 100000;
    vec3 closest = vec3(0,0,0);
    for(int x = -1; x<=1; x++)
    for(int y = -1; y<=1; y++)
    for(int z = -1; z<=1; z++)
    {
        ivec3 offset = ivec3(x,y,z);

        vec3 col = getDancingPoint(offset + slop.xyz) + vec3(offset);
        float dist = distance(col, localpos);
        if(dist < minDist)
        {
            minDist = dist;
            closest = col;
        }
    }

    vec3 eff = sawtooth((closest+slop.xyz)*vec3(.05,.015,.03));
    pixOut.Albedo = color.xyz*(.1+1.2*eff*eff);
}