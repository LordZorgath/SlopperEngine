vertOut vec4 position;

vertIn vec4 position;
vertIn vec2 UVCoordinates;

vertToPix vec2 uvCoords;

void vertex()
{
    vertToPix.uvCoords = vertIn.UVCoordinates;
    vertOut.position = vertIn.position;
}

pixOut vec3 Albedo;
uniform sampler2D mainTexture;

void pixel()
{
    float escape = 25;
    float cst = .2;
    int maxIterations = 300;

    //get a starting position with zoom
    vec2 startPos = 2 * vertToPix.uvCoords - 1;
    startPos.x *= 1.333;

    float zoom = cos(Globals.time*.1) + 1;
    zoom = pow(zoom*.5, 3);
    startPos *= .00025+zoom*1.8;
    startPos += vec2(-0.1527472169893725, 1.0397155848299984) * (1-zoom);

    //compute mandelbrot set
    vec2 Z = startPos;
    float finalIteration;
    for(int i = 0; i<maxIterations; i++)
    {
        if(Z.x*Z.x + Z.y*Z.y < escape)
        {
            Z = vec2(
                Z.x*Z.x - Z.y*Z.y + startPos.x,
                2*Z.x*Z.y + startPos.y
            );
            finalIteration = i;
        }
        else break;
    }

    vec3 finalCol;
    if(dot(Z,Z) > escape)
    {
        vec2 esc = Z;
        float escMag = length(esc);
        esc /= escMag;

        //no idea where i got this from. my java processing code was completely uncommented
        //i remember it being someone's method though, definitely didnt invent it
        float dist = abs(log(escMag)/log(escape));
        vec2 UV = vec2(
            2*fract(abs(atan(Z.y, Z.x)/6.28)),
            2*fract(dist)-1
        );
        vec3 coolColor = vec3(finalIteration * .3, finalIteration*.3+.843, finalIteration*.3+1.612);
        coolColor = abs(sin(coolColor));
        finalCol = texture(mainTexture, UV).xyz * coolColor;
    }
    else
    {
        finalCol = vec3(.06,.1,.2);
    }

    pixOut.Albedo = finalCol; //texture(mainTexture, vertToPix.uvCoords).xyz;
}