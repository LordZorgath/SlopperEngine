vertOut vec4 position;

vertToPix vec4 worldPosition;
vertToPix vec2 uvCoords;
vertToPix vec4 normal;

vertIn vec4 position;
vertIn vec2 UVCoordinates;
vertIn vec3 normal;

void vertex()
{
    vertToPix.worldPosition = vertIn.position * Globals.model;
    
    vertOut.position = vertToPix.worldPosition * Globals.view * Globals.projection;
    vertToPix.normal = vec4(vertIn.normal, 0.0)*Globals.model;
    vertToPix.uvCoords = vertIn.UVCoordinates;
}

pixOut vec3 Albedo;
pixOut vec3 Normal;
pixOut vec3 Position;
pixOut float Specular;

uniform vec4 color;

void pixel()
{
    //phong shading
    vec3 norm = normalize(vertToPix.normal.xyz);
    pixOut.Normal = norm;
    pixOut.Position = vertToPix.worldPosition.xyz;
    pixOut.Specular = 20.;
    pixOut.Albedo = vec3(.8);
}